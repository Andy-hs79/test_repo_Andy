# 1. Написать функцию, которая принимает список словарей, где каждый словарь представляет собой запись об ученике (с
#    ключами 'имя', 'возраст', 'оценки'), и возвращает список словарей, отсортированный по возрасту учеников в порядке
#    убывания


def students_sort(students: list) -> list:
    def custom_key(people):
        return people['возраст']

    students.sort(key=custom_key)
    return students


# 2*. Написать функцию, которая принимает дерево, представленное в виде списка списков, где каждый элемент списка может
#    быть либо числом, либо подсписком, и возвращает сумму всех чисел в дереве.
#    пример: [1, 2, [3, 4, [5, 6]], [12, 13], 11, 10]
def summ_sublist(lst: list) -> int:
    lst = str(tree_lst)
    lst = lst.replace('[', ',')
    lst = lst.replace(']', ',')
    lst = lst.replace(' ', '')
    lst = lst.split(',')
    lst = [int(x) for x in lst if x != '']
    return sum(lst)


# 3. Написать функцию, которая принимает список дат в формате 'ДД.ММ.ГГГГ'
#    и возвращает список дат в формате 'ГГГГ-ММ-ДД', отсортированный по возрастанию.
def date_sort(d: list) -> list:
    res = []
    for d in d:
        d = d.split('.')
        res.append(f'{d[2]}-{d[1]}-{d[0]}')
        res.sort()
    return res


students_lst = [{'имя': 'Иван', 'возраст': 13, 'оценки': [5, 4, 5, 3, 4, 5]},
                {'имя': 'Петр', 'возраст': 10, 'оценки': [4, 4, 4, 3, 4, 5]},
                {'имя': 'Вася', 'возраст': 15, 'оценки': [3, 4, 5, 5, 3, 2]}]
tree_lst = [1, 2, [3, 4, [5, 6]], [12, 13], 11, 10]
date = ['05.12.2022', '21.07.1979', '25.11.2023', '15.03.2001']

print(*students_sort(students_lst), sep='\n')
print(summ_sublist(tree_lst))
print(date_sort(date))

